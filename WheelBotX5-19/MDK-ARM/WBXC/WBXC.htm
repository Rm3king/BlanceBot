<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [WBXC\WBXC.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image WBXC\WBXC.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6190004: Last Updated: Fri Jul 12 21:18:14 2024
<BR><P>
<H3>Maximum Stack Usage =        568 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RoboCTRThreadFun(unsigned long) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[140]">__user_initial_stackheap</a>
 <LI><a href="#[245]">_tx_initialize_low_level</a>
 <LI><a href="#[102]">__tx_BadHandler</a>
 <LI><a href="#[103]">__tx_HardfaultHandler</a>
 <LI><a href="#[104]">__tx_SVCallHandler</a>
 <LI><a href="#[298]">__tx_IntHandler</a>
 <LI><a href="#[9]">SysTick_Handler</a>
 <LI><a href="#[299]">__tx_SysTickHandler</a>
 <LI><a href="#[106]">__tx_NMIHandler</a>
 <LI><a href="#[107]">__tx_DBGHandler</a>
 <LI><a href="#[247]">_tx_thread_schedule</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[29a]">__tx_PendSVHandler</a>
 <LI><a href="#[29b]">tx_thread_fpu_disable</a>
 <LI><a href="#[29c]">tx_thread_fpu_enable</a>
 <LI><a href="#[250]">_tx_thread_stack_build</a>
 <LI><a href="#[105]">_tx_timer_interrupt</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[81]">ADC3_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[81]">ADC3_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[81]">ADC3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[83]">BDMA_Channel0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[84]">BDMA_Channel1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[85]">BDMA_Channel2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[86]">BDMA_Channel3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[87]">BDMA_Channel4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[88]">BDMA_Channel5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[89]">BDMA_Channel6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8a]">BDMA_Channel7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h7xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[62]">CEC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8b]">COMP1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[91]">CRS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[53]">DCMI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[72]">DFSDM1_FLT0_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[73]">DFSDM1_FLT1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[74]">DFSDM1_FLT2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[75]">DFSDM1_FLT3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[15]">DMA1_Stream0_IRQHandler</a> from remotertask.o(.text.DMA1_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[16]">DMA1_Stream1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[17]">DMA1_Stream2_IRQHandler</a> from initaltask.o(.text.DMA1_Stream2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream3_IRQHandler</a> from initaltask.o(.text.DMA1_Stream3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[38]">DMA1_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5e]">DMA2D_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[41]">DMA2_Stream0_IRQHandler</a> from refertask.o(.text.DMA2_Stream0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[42]">DMA2_Stream1_IRQHandler</a> from refertask.o(.text.DMA2_Stream1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[43]">DMA2_Stream2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[44]">DMA2_Stream3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6a]">DMAMUX1_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[82]">DMAMUX2_OVR_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h7xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[92]">ECC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[46]">ETH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[47]">ETH_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from imutask.o(.text.EXTI0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from imutask.o(.text.EXTI1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1d]">FDCAN1_IT0_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN1_IT0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1f]">FDCAN1_IT1_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN1_IT1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1e]">FDCAN2_IT0_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN2_IT0_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[20]">FDCAN2_IT1_IRQHandler</a> from stm32h7xx_it.o(.text.FDCAN2_IT1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[48]">FDCAN_CAL_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[39]">FMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[55]">FPU_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[71]">HRTIM1_FLT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6b]">HRTIM1_Master_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6c]">HRTIM1_TIMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6d]">HRTIM1_TIMB_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6e]">HRTIM1_TIMC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6f]">HRTIM1_TIMD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[70]">HRTIM1_TIME_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[80]">HSEM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32h7xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4e]">I2C3_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4d]">I2C3_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[64]">I2C4_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[63]">I2C4_EV_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9b]">IMU_QuaternionEKF_F_Linearization_P_Fading</a> from quaternionekf.o(.text.IMU_QuaternionEKF_F_Linearization_P_Fading) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[9c]">IMU_QuaternionEKF_Observe</a> from quaternionekf.o(.text.IMU_QuaternionEKF_Observe) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[9e]">IMU_QuaternionEKF_SetH</a> from quaternionekf.o(.text.IMU_QuaternionEKF_SetH) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[9d]">IMU_QuaternionEKF_xhatUpdate</a> from quaternionekf.o(.text.IMU_QuaternionEKF_xhatUpdate) referenced 2 times from quaternionekf.o(.text.IMU_QuaternionEKF_Init)
 <LI><a href="#[7d]">JPEG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[61]">LPTIM1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8c]">LPTIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8d]">LPTIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8e]">LPTIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8f]">LPTIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[90]">LPUART1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5d]">LTDC_ER_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5c]">LTDC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7c]">MDIOS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7b]">MDIOS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7e]">MDMA_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h7xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h7xx_it.o(.text.NMI_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[67]">OTG_FS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[66]">OTG_FS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[69]">OTG_FS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[68]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[50]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4f]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[52]">OTG_HS_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[51]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from tx_thread_schedule.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[60]">QUADSPI_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[54]">RNG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5f]">SAI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[76]">SAI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[93]">SAI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3a]">SDMMC1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7f]">SDMMC2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[65]">SPDIF_RX_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3c]">SPI3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[58]">SPI4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[59]">SPI5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5a]">SPI6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[77]">SWPMI1_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from tx_initialize_low_level.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[95]">SystemInit</a> from system_stm32h7xx.o(.text.SystemInit) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[c]">TAMP_STAMP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[78]">TIM15_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[79]">TIM16_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[7a]">TIM17_IRQHandler</a> from main.o(.text.TIM17_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3b]">TIM5_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3f]">TIM6_DAC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[40]">TIM7_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[34]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[37]">TIM8_CC_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[36]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[35]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3d]">UART4_IRQHandler</a> from remotertask.o(.text.UART4_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[3e]">UART5_IRQHandler</a> from refertask.o(.text.UART5_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[56]">UART7_IRQHandler</a> from initaltask.o(.text.UART7_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[57]">UART8_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[9a]">UART_DMAAbortOnError</a> from stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError) referenced 2 times from stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[aa]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
 <LI><a href="#[aa]">UART_RxISR_16BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[ad]">UART_RxISR_16BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[ab]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 2 times from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
 <LI><a href="#[ab]">UART_RxISR_8BIT</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT) referenced 4 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[ac]">UART_RxISR_8BIT_FIFOEN</a> from stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN) referenced 4 times from stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32h7xx_it.o(.text.USART1_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from motortask.o(.text.USART2_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from motortask.o(.text.USART3_IRQHandler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[4c]">USART6_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h7xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[94]">WAKEUP_PIN_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h743xx.o(.text) referenced from startup_stm32h743xx.o(RESET)
 <LI><a href="#[c6]">_GLOBAL__sub_I_MotorTask.cpp</a> from motortask.o(.text._GLOBAL__sub_I_MotorTask.cpp) referenced from motortask.o(.init_array)
 <LI><a href="#[c5]">_GLOBAL__sub_I_ReferTask.cpp</a> from refertask.o(.text._GLOBAL__sub_I_ReferTask.cpp) referenced from refertask.o(.init_array)
 <LI><a href="#[a0]">INSThreadFun(unsigned long)</a> from imutask.o(.text._Z12INSThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a1]">TemThreadFun(unsigned long)</a> from imutask.o(.text._Z12TemThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a2]">MotorThreadFun(unsigned long)</a> from motortask.o(.text._Z14MotorThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a6]">UART5ThreadFun(unsigned long)</a> from refertask.o(.text._Z14UART5ThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a7]">DrawUIThreadFun(unsigned long)</a> from refertask.o(.text._Z15DrawUIThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a3]">MotorWThreadFun(unsigned long)</a> from motortask.o(.text._Z15MotorWThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[9f]">RemoterThreadFun(unsigned long)</a> from remotertask.o(.text._Z16RemoterThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a4]">RoboCTRThreadFun(unsigned long)</a> from controltask.o(.text._Z16RoboCTRThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a5]">CloseLoopThreadFun(unsigned long)</a> from closelooptask.o(.text._Z18CloseLoopThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a8]">LedThreadFun(unsigned long)</a> from initaltask.o(.text._ZL12LedThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[a9]">DebugThreadFun(unsigned long)</a> from initaltask.o(.text._ZL14DebugThreadFunm) referenced 2 times from initaltask.o(.text.Task_Init)
 <LI><a href="#[b3]">cLoopTheta::PID_Init()</a> from controltask.o(.text._ZN10cLoopTheta8PID_InitEv) referenced from controltask.o(.rodata._ZTV10cLoopTheta)
 <LI><a href="#[b5]">cLoopEscape::PID_Init()</a> from controltask.o(.text._ZN11cLoopEscape8PID_InitEv) referenced from controltask.o(.rodata._ZTV11cLoopEscape)
 <LI><a href="#[b6]">cLoopLen_Dot::PID_Init()</a> from controltask.o(.text._ZN12cLoopLen_Dot8PID_InitEv) referenced from controltask.o(.rodata._ZTV12cLoopLen_Dot)
 <LI><a href="#[b7]">cLoopLen_Spf::PID_Init()</a> from controltask.o(.text._ZN12cLoopLen_Spf8PID_InitEv) referenced from controltask.o(.rodata._ZTV12cLoopLen_Spf)
 <LI><a href="#[b8]">cLooplen_Stop::PID_Init()</a> from controltask.o(.text._ZN13cLooplen_Stop8PID_InitEv) referenced from controltask.o(.rodata._ZTV13cLooplen_Stop)
 <LI><a href="#[b9]">cLoopTheta_Spf::PID_Init()</a> from controltask.o(.text._ZN14cLoopTheta_Spf8PID_InitEv) referenced from controltask.o(.rodata._ZTV14cLoopTheta_Spf)
 <LI><a href="#[ba]">cLooplen_Ready::PID_Init()</a> from controltask.o(.text._ZN14cLooplen_Ready8PID_InitEv) referenced from controltask.o(.rodata._ZTV14cLooplen_Ready)
 <LI><a href="#[bb]">cLoopRollOffset::PID_Init()</a> from controltask.o(.text._ZN15cLoopRollOffset8PID_InitEv) referenced from controltask.o(.rodata._ZTV15cLoopRollOffset)
 <LI><a href="#[bc]">cIMU::PID_Init()</a> from imutask.o(.text._ZN4cIMU8PID_InitEv) referenced from imutask.o(.rodata._ZTV4cIMU)
 <LI><a href="#[bd]">cUART::Delay()</a> from refertask.o(.text._ZN5cUART5DelayEv) referenced from refertask.o(.rodata._ZTV4cRef)
 <LI><a href="#[bd]">cUART::Delay()</a> from refertask.o(.text._ZN5cUART5DelayEv) referenced from initaltask.o(.rodata._ZTV5cUART)
 <LI><a href="#[bd]">cUART::Delay()</a> from refertask.o(.text._ZN5cUART5DelayEv) referenced from remotertask.o(.rodata._ZTV8cRemoter)
 <LI><a href="#[be]">cDM8006::CAN_Transmit(unsigned char*)</a> from motortask.o(.text._ZN7cDM800612CAN_TransmitEPh) referenced from motortask.o(.rodata._ZTV7cDM8006)
 <LI><a href="#[bf]">cKF9025::Init()</a> from motortask.o(.text._ZN7cKF90254InitEv) referenced from motortask.o(.rodata._ZTV7cKF9025)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV10cLoopTheta)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV11cLoopEscape)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV12cLoopLen_Dot)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV13cLooplen_Stop)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV14cLooplen_Ready)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV15cLoopRollOffset)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV8cLoopCFG)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV8cLoopLen)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV8cLoopYaw)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV9cLoopGyro)
 <LI><a href="#[b4]">cPIDPla::ForwardLoop()</a> from pid.o(.text._ZN7cPIDPla11ForwardLoopEv) referenced from controltask.o(.rodata._ZTV9cLoopRoll)
 <LI><a href="#[c0]">cLoopCFG::PID_Init()</a> from controltask.o(.text._ZN8cLoopCFG8PID_InitEv) referenced from controltask.o(.rodata._ZTV8cLoopCFG)
 <LI><a href="#[c1]">cLoopLen::PID_Init()</a> from controltask.o(.text._ZN8cLoopLen8PID_InitEv) referenced from controltask.o(.rodata._ZTV8cLoopLen)
 <LI><a href="#[c2]">cLoopYaw::PID_Init()</a> from controltask.o(.text._ZN8cLoopYaw8PID_InitEv) referenced from controltask.o(.rodata._ZTV8cLoopYaw)
 <LI><a href="#[c3]">cLoopGyro::PID_Init()</a> from controltask.o(.text._ZN9cLoopGyro8PID_InitEv) referenced from controltask.o(.rodata._ZTV9cLoopGyro)
 <LI><a href="#[c4]">cLoopRoll::PID_Init()</a> from controltask.o(.text._ZN9cLoopRoll8PID_InitEv) referenced from controltask.o(.rodata._ZTV9cLoopRoll)
 <LI><a href="#[96]">__main</a> from __main.o(!!!main) referenced from startup_stm32h743xx.o(.text)
 <LI><a href="#[99]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[98]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[97]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[ae]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_allocate.o(.text._tx_byte_allocate)
 <LI><a href="#[ae]">_tx_byte_pool_cleanup</a> from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup) referenced 2 times from tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
 <LI><a href="#[af]">_tx_queue_cleanup</a> from tx_queue_cleanup.o(.text._tx_queue_cleanup) referenced 2 times from tx_queue_cleanup.o(.text._tx_queue_cleanup)
 <LI><a href="#[af]">_tx_queue_cleanup</a> from tx_queue_cleanup.o(.text._tx_queue_cleanup) referenced 2 times from tx_queue_receive.o(.text._tx_queue_receive)
 <LI><a href="#[af]">_tx_queue_cleanup</a> from tx_queue_cleanup.o(.text._tx_queue_cleanup) referenced 2 times from tx_queue_send.o(.text._tx_queue_send)
 <LI><a href="#[b0]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
 <LI><a href="#[b0]">_tx_semaphore_cleanup</a> from tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup) referenced 2 times from tx_semaphore_get.o(.text._tx_semaphore_get)
 <LI><a href="#[b2]">_tx_thread_shell_entry</a> from tx_thread_shell_entry.o(.text._tx_thread_shell_entry) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
 <LI><a href="#[b1]">_tx_thread_timeout</a> from tx_thread_timeout.o(.text._tx_thread_timeout) referenced 2 times from tx_thread_create.o(.text._tx_thread_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[96]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[c8]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[ca]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[270]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[271]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[272]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[273]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[274]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[cb]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[128]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[cd]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[cf]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d1]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d2]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[d3]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[275]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[d5]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d8]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d9]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[db]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[dd]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[df]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e0]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[e1]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[e3]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[276]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[e5]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e7]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[e9]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[eb]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[277]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[fa]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[ed]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[ef]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[278]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[279]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[27b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[27c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[27d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[27e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[27f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[280]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[281]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[282]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[283]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[284]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[285]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[286]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[287]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[288]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[289]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[28a]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[28d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[28e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[28f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[290]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[291]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[292]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[293]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[c9]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[294]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[f7]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[f9]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[295]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[fb]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; Task_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[296]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[141]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[fe]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[297]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[100]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>BDMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>BDMA_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>BDMA_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>BDMA_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>BDMA_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>BDMA_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>BDMA_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>BDMA_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>DFSDM1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>DFSDM1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DFSDM1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>DFSDM1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>DMAMUX1_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMAMUX2_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>ECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>FDCAN_CAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HRTIM1_FLT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HRTIM1_Master_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HRTIM1_TIMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>HRTIM1_TIMB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>HRTIM1_TIMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>HRTIM1_TIMD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>HRTIM1_TIME_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>HSEM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>LPTIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>MDIOS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>MDIOS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_FS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_FS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>QUADSPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>SAI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>SAI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SPDIF_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>SWPMI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>WAKEUP_PIN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h743xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[140]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32h743xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[245]"></a>_tx_initialize_low_level</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[102]"></a>__tx_BadHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_BadHandler
</UL>

<P><STRONG><a name="[103]"></a>__tx_HardfaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_HardfaultHandler
</UL>

<P><STRONG><a name="[104]"></a>__tx_SVCallHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_SVCallHandler
</UL>

<P><STRONG><a name="[298]"></a>__tx_IntHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; _tx_timer_interrupt &rArr; _tx_timer_expiration_process
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[299]"></a>__tx_SysTickHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)

<P><STRONG><a name="[106]"></a>__tx_NMIHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_NMIHandler
</UL>

<P><STRONG><a name="[107]"></a>__tx_DBGHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_initialize_low_level.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__tx_DBGHandler
</UL>

<P><STRONG><a name="[247]"></a>_tx_thread_schedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[29a]"></a>__tx_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[29b]"></a>tx_thread_fpu_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[29c]"></a>tx_thread_fpu_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_schedule.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>_tx_thread_stack_build</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_thread_stack_build.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
</UL>

<P><STRONG><a name="[105]"></a>_tx_timer_interrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, tx_timer_interrupt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = _tx_timer_interrupt &rArr; _tx_timer_expiration_process
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_expiration_process
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[10a]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[1dd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[29d]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>vsnprintf</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::CharacterUpdate(unsigned char*, eUI_LAYER_ID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned char, unsigned short, unsigned short, char const*, ...)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPrintf(unsigned char*, char const*, ...)
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Rx()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[10f]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[29e]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Reset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Observe
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[255]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29f]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a8]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Reset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
</UL>

<P><STRONG><a name="[2a1]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Reset
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_ReferTask.cpp
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_SetH
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Reset
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_create
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotorUnit::cMotorUnit__sub_object()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_init_f32
</UL>

<P><STRONG><a name="[22b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotorUnit::cMotorUnit__sub_object()
</UL>

<P><STRONG><a name="[2a2]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[231]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7m_pel.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GraphGroupUpdateCircle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GraphGroupUpdateRectangle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GraphGroupUpdateLine(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[2a3]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[10b]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[119]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[2a6]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2a7]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2a8]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[2ab]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[114]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[f0]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[116]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2ac]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[118]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[11a]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[11c]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[11d]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[11e]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11f]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[11b]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d6]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[cc]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[10e]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>

<P><STRONG><a name="[97]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[122]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[de]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[125]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[da]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[e2]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[126]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[dc]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[e4]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[ce]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[121]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[129]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int)
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[239]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int)
</UL>

<P><STRONG><a name="[12b]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[2ad]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[101]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[2ae]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2af]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[12e]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_c16rtomb
</UL>

<P><STRONG><a name="[113]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[2b0]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[120]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[134]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[137]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[138]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[e6]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[e8]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[139]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[ea]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[ec]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[13a]"></a>_c16rtomb</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, _c16rtomb.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[123]"></a>_wcrtomb</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, _c16rtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[12a]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[115]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[2b1]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2b2]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[12d]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[2b3]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f2]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[136]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[130]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fd]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[13c]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[13b]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[13d]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[142]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[143]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[144]"></a>ADC_ConfigureBoostMode</STRONG> (Thumb, 300 bytes, Stack size 16 bytes, stm32h7xx_hal_adc.o(.text.ADC_ConfigureBoostMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_ConfigureBoostMode &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[259]"></a>App_ThreadX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_threadx.o(.text.App_ThreadX_Init))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, remotertask.o(.text.DMA1_Stream0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, initaltask.o(.text.DMA1_Stream2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, initaltask.o(.text.DMA1_Stream3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Stream3_IRQHandler &rArr; cUART::IRQ_Tx()
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Tx()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, refertask.o(.text.DMA2_Stream0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA2_Stream0_IRQHandler &rArr; _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, refertask.o(.text.DMA2_Stream1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Stream1_IRQHandler &rArr; cUART::IRQ_Tx()
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Tx()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, imutask.o(.text.EXTI0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, imutask.o(.text.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EXTI1_IRQHandler &rArr; cICM42688::ReadAccelGyro() &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadTem()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadAccelGyro()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>Error_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[1d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.FDCAN1_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FDCAN1_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.FDCAN1_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FDCAN1_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>FDCAN2_IT0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.FDCAN2_IT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FDCAN2_IT0_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>FDCAN2_IT1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.FDCAN2_IT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FDCAN2_IT1_IRQHandler &rArr; HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>HAL_ADCEx_MultiModeConfigChannel</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32h7xx_hal_adc_ex.o(.text.HAL_ADCEx_MultiModeConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_MultiModeConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 988 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[14d]"></a>HAL_ADC_Init</STRONG> (Thumb, 622 bytes, Stack size 24 bytes, stm32h7xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetREVID
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
</UL>

<P><STRONG><a name="[14e]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[150]"></a>HAL_DMA_Abort</STRONG> (Thumb, 1326 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18c]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 698 bytes, Stack size 8 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[152]"></a>HAL_DMA_Init</STRONG> (Thumb, 1638 bytes, Stack size 24 bytes, stm32h7xx_hal_dma.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[1fc]"></a>HAL_FDCAN_ActivateNotification</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ActivateNotification))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFilterConfig()
</UL>

<P><STRONG><a name="[1ef]"></a>HAL_FDCAN_AddMessageToTxFifoQ</STRONG> (Thumb, 238 bytes, Stack size 28 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_AddMessageToTxFifoQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDM8006::CAN_Transmit(unsigned char*)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[156]"></a>HAL_FDCAN_ClockCalibrationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ClockCalibrationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[1fb]"></a>HAL_FDCAN_ConfigFilter</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFilterConfig()
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_FDCAN_ConfigGlobalFilter</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ConfigGlobalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFilterConfig()
</UL>

<P><STRONG><a name="[160]"></a>HAL_FDCAN_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[15f]"></a>HAL_FDCAN_ErrorStatusCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_ErrorStatusCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>HAL_FDCAN_GetRxMessage</STRONG> (Thumb, 486 bytes, Stack size 28 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_GetRxMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_FDCAN_GetRxMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[154]"></a>HAL_FDCAN_HighPriorityMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_HighPriorityMessageCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[14c]"></a>HAL_FDCAN_IRQHandler</STRONG> (Thumb, 790 bytes, Stack size 72 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_FDCAN_IRQHandler &rArr; HAL_FDCAN_RxFifo0Callback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_GlobalTimeCallback
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_StopWatchCallback
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_TimeMarkCallback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TT_ScheduleSyncCallback
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorCallback
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ErrorStatusCallback
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimeoutOccurredCallback
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TimestampWraparoundCallback
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxBufferNewMessageCallback
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferCompleteCallback
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxFifoEmptyCallback
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxEventFifoCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ClockCalibrationCallback
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_TxBufferAbortCallback
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_HighPriorityMessageCallback
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT1_IRQHandler
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT1_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN2_IT0_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FDCAN1_IT0_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>HAL_FDCAN_Init</STRONG> (Thumb, 1024 bytes, Stack size 56 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_FDCAN_MspInit</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, fdcan.o(.text.HAL_FDCAN_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
</UL>

<P><STRONG><a name="[15c]"></a>HAL_FDCAN_RxBufferNewMessageCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_RxBufferNewMessageCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>HAL_FDCAN_RxFifo0Callback</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, motortask.o(.text.HAL_FDCAN_RxFifo0Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_FDCAN_RxFifo0Callback &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRMMotor::UpdateMotorRec(unsigned char*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[159]"></a>HAL_FDCAN_RxFifo1Callback</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, motortask.o(.text.HAL_FDCAN_RxFifo1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_FDCAN_RxFifo1Callback &rArr; HAL_FDCAN_GetRxMessage
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_GetRxMessage
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMMotor::MessageDecode(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[1fe]"></a>HAL_FDCAN_Start</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_Start))
<BR><BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFilterConfig()
</UL>

<P><STRONG><a name="[164]"></a>HAL_FDCAN_TT_GlobalTimeCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_GlobalTimeCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[161]"></a>HAL_FDCAN_TT_ScheduleSyncCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_ScheduleSyncCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[163]"></a>HAL_FDCAN_TT_StopWatchCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_StopWatchCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[162]"></a>HAL_FDCAN_TT_TimeMarkCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TT_TimeMarkCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[15e]"></a>HAL_FDCAN_TimeoutOccurredCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TimeoutOccurredCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>HAL_FDCAN_TimestampWraparoundCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TimestampWraparoundCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_FDCAN_TxBufferAbortCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferAbortCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[15b]"></a>HAL_FDCAN_TxBufferCompleteCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxBufferCompleteCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>HAL_FDCAN_TxEventFifoCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxEventFifoCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[15a]"></a>HAL_FDCAN_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_fdcan.o(.text.HAL_FDCAN_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>HAL_GPIO_Init</STRONG> (Thumb, 426 bytes, Stack size 44 bytes, stm32h7xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>

<P><STRONG><a name="[147]"></a>HAL_GetREVID</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetREVID))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[151]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[170]"></a>HAL_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32h7xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>HAL_InitTick</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32h7xx_hal_timebase_tim.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetClockConfig
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_MspInit</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32h7xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[168]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[167]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_MspInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
</UL>

<P><STRONG><a name="[171]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h7xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[179]"></a>HAL_RCCEx_GetD3PCLK1Freq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetD3PCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetD3PCLK1Freq &rArr; HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[17d]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[17b]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[17c]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[146]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 1106 bytes, Stack size 24 bytes, stm32h7xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[175]"></a>HAL_RCC_GetClockConfig</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetClockConfig))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[145]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetHCLKFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConfigureBoostMode
</UL>

<P><STRONG><a name="[17a]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[176]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[172]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 372 bytes, Stack size 0 bytes, stm32h7xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[17e]"></a>HAL_SPI_Init</STRONG> (Thumb, 446 bytes, Stack size 32 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[17f]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[180]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 1018 bytes, Stack size 40 bytes, stm32h7xx_hal_spi.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CloseTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadTem()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadAccelGyro()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init()
</UL>

<P><STRONG><a name="[1c2]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32h7xx_hal_tim_ex.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[177]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[182]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[257]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[178]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1c1]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 508 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, tim.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[1c3]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 1214 bytes, Stack size 24 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_PWM_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[185]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[186]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[258]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 396 bytes, Stack size 0 bytes, stm32h7xx_hal_tim.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cf]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[18e]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[18d]"></a>HAL_UARTEx_RxFifoFullCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_RxFifoFullCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[1ce]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[1cd]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[18a]"></a>HAL_UARTEx_TxFifoEmptyCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_TxFifoEmptyCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[188]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart_ex.o(.text.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[18b]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
</UL>

<P><STRONG><a name="[187]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1880 bytes, Stack size 16 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxFifoFullCallback
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_TxFifoEmptyCallback
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[18f]"></a>HAL_UART_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[190]"></a>HAL_UART_MspInit</STRONG> (Thumb, 254 bytes, Stack size 48 bytes, usart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[195]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[197]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 1064 bytes, Stack size 8 bytes, usart.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_process
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT_FIFOEN
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_16BIT
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT_FIFOEN
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxISR_8BIT
</UL>

<P><STRONG><a name="[189]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>IMU_QuaternionEKF_Init</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_Init &rArr; Kalman_Filter_Init &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[19c]"></a>IMU_QuaternionEKF_Reset</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_Reset &rArr; Kalman_Filter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Reset
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[19f]"></a>IMU_QuaternionEKF_Update</STRONG> (Thumb, 592 bytes, Stack size 56 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[19a]"></a>Kalman_Filter_Init</STRONG> (Thumb, 1236 bytes, Stack size 40 bytes, kalman_filter.o(.text.Kalman_Filter_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Init &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
</UL>

<P><STRONG><a name="[1a9]"></a>Kalman_Filter_Measure</STRONG> (Thumb, 568 bytes, Stack size 56 bytes, kalman_filter.o(.text.Kalman_Filter_Measure))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Measure &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[19d]"></a>Kalman_Filter_Reset</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, kalman_filter.o(.text.Kalman_Filter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Reset
</UL>

<P><STRONG><a name="[1aa]"></a>Kalman_Filter_SetK</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, kalman_filter.o(.text.Kalman_Filter_SetK))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
</UL>

<P><STRONG><a name="[1a0]"></a>Kalman_Filter_Update</STRONG> (Thumb, 944 bytes, Stack size 40 bytes, kalman_filter.o(.text.Kalman_Filter_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Measure
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
</UL>

<P><STRONG><a name="[1b8]"></a>LL_EXTI_Init</STRONG> (Thumb, 544 bytes, Stack size 8 bytes, stm32h7xx_ll_exti.o(.text.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1b7]"></a>LL_GPIO_Init</STRONG> (Thumb, 206 bytes, Stack size 28 bytes, stm32h7xx_ll_gpio.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OPAMP1_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1ba]"></a>LL_OPAMP_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32h7xx_ll_opamp.o(.text.LL_OPAMP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_OPAMP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OPAMP1_Init
</UL>

<P><STRONG><a name="[1ae]"></a>LL_RCC_GetPLL1ClockFreq</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, stm32h7xx_ll_rcc.o(.text.LL_RCC_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[1ad]"></a>LL_RCC_GetPLL2ClockFreq</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, stm32h7xx_ll_rcc.o(.text.LL_RCC_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[1ac]"></a>LL_RCC_GetPLL3ClockFreq</STRONG> (Thumb, 396 bytes, Stack size 8 bytes, stm32h7xx_ll_rcc.o(.text.LL_RCC_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[1ab]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 568 bytes, Stack size 24 bytes, stm32h7xx_ll_rcc.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL3ClockFreq
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL2ClockFreq
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[1d3]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_ll_utils.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1bf]"></a>LL_TIM_BDTR_Init</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32h7xx_ll_tim.o(.text.LL_TIM_BDTR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_BDTR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[1bd]"></a>LL_TIM_Init</STRONG> (Thumb, 330 bytes, Stack size 0 bytes, stm32h7xx_ll_tim.o(.text.LL_TIM_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[1be]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 1074 bytes, Stack size 20 bytes, stm32h7xx_ll_tim.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_TIM_OC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
</UL>

<P><STRONG><a name="[1af]"></a>LL_USART_Init</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32h7xx_ll_usart.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
</UL>

<P><STRONG><a name="[1b0]"></a>MX_ADC1_Init</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, adc.o(.text.MX_ADC1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_ADC1_Init &rArr; HAL_ADC_Init &rArr; HAL_ADC_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_MultiModeConfigChannel
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b3]"></a>MX_DMA_Init</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, dma.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>MX_FDCAN1_Init</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, fdcan.o(.text.MX_FDCAN1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_FDCAN1_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b5]"></a>MX_FDCAN2_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, fdcan.o(.text.MX_FDCAN2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_FDCAN2_Init &rArr; HAL_FDCAN_Init &rArr; HAL_FDCAN_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>MX_GPIO_Init</STRONG> (Thumb, 428 bytes, Stack size 80 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>MX_OPAMP1_Init</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, opamp.o(.text.MX_OPAMP1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MX_OPAMP1_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_OPAMP_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bb]"></a>MX_SPI2_Init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, spi.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bc]"></a>MX_TIM16_Init</STRONG> (Thumb, 218 bytes, Stack size 136 bytes, tim.o(.text.MX_TIM16_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = MX_TIM16_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c0]"></a>MX_TIM2_Init</STRONG> (Thumb, 216 bytes, Stack size 64 bytes, tim.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c4]"></a>MX_TIM3_Init</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, tim.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c5]"></a>MX_TIM4_Init</STRONG> (Thumb, 268 bytes, Stack size 104 bytes, tim.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MX_TIM4_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>MX_TIM8_Init</STRONG> (Thumb, 330 bytes, Stack size 144 bytes, tim.o(.text.MX_TIM8_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = MX_TIM8_Init &rArr; LL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_BDTR_Init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c7]"></a>MX_ThreadX_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app_threadx.o(.text.MX_ThreadX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; Task_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c9]"></a>MX_UART4_Init</STRONG> (Thumb, 518 bytes, Stack size 88 bytes, usart.o(.text.MX_UART4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_UART4_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ca]"></a>MX_UART5_Init</STRONG> (Thumb, 664 bytes, Stack size 88 bytes, usart.o(.text.MX_UART5_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_UART5_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cb]"></a>MX_UART7_Init</STRONG> (Thumb, 578 bytes, Stack size 72 bytes, usart.o(.text.MX_UART7_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_UART7_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1cc]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d0]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 570 bytes, Stack size 72 bytes, usart.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART2_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d1]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 578 bytes, Stack size 72 bytes, usart.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_USART3_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; LL_RCC_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[256]"></a>PeriphCommonClock_Config</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, main.o(.text.PeriphCommonClock_Config))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>SystemClock_Config</STRONG> (Thumb, 514 bytes, Stack size 8 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SystemClock_Config &rArr; HAL_InitTick &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>SystemInit</STRONG> (Thumb, 300 bytes, Stack size 12 bytes, system_stm32h7xx.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(.text)
</UL>
<P><STRONG><a name="[7a]"></a>TIM17_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(.text.TIM17_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[183]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, stm32h7xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1d4]"></a>Task_Init</STRONG> (Thumb, 764 bytes, Stack size 64 bytes, initaltask.o(.text.Task_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = Task_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_create
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[3d]"></a>UART4_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, remotertask.o(.text.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART4_IRQHandler &rArr; _txe_queue_send &rArr; _tx_queue_send &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Rx()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART5_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, refertask.o(.text.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART5_IRQHandler &rArr; _txe_queue_send &rArr; _tx_queue_send &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_send
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Rx()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>UART7_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, initaltask.o(.text.UART7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART7_IRQHandler &rArr; cUART::IRQ_Rx()
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Rx()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[193]"></a>UART_CheckIdleState</STRONG> (Thumb, 374 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[192]"></a>UART_SetConfig</STRONG> (Thumb, 1196 bytes, Stack size 32 bytes, stm32h7xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetD3PCLK1Freq
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[196]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 628 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[1dc]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 856 bytes, Stack size 24 bytes, stm32h7xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_DMA_Abort
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, motortask.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; cUART::Recieve_DMA(unsigned char**, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Rx()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotor::ReceiveIqMsr(unsigned char*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, motortask.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_IRQHandler &rArr; cUART::Recieve_DMA(unsigned char**, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Rx()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotor::ReceiveIqMsr(unsigned char*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h7xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h743xx.o(RESET)
</UL>
<P><STRONG><a name="[1e0]"></a>VelFusionKF_Init</STRONG> (Thumb, 888 bytes, Stack size 40 bytes, kf_velfusion.o(.text.VelFusionKF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = VelFusionKF_Init &rArr; _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_init_f32
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCTRThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1e1]"></a>VelFusionKF_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, kf_velfusion.o(.text.VelFusionKF_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = VelFusionKF_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1e2]"></a>VelFusionKF_Update</STRONG> (Thumb, 746 bytes, Stack size 40 bytes, kf_velfusion.o(.text.VelFusionKF_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = VelFusionKF_Update &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1e6]"></a>ReadIMUCal(float*, float*)</STRONG> (Thumb, 190 bytes, Stack size 88 bytes, flashparadriver.o(.text._Z10ReadIMUCalPfS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ReadIMUCal(float*, float*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1e4]"></a>DebugPrintf(unsigned char*, char const*, ...)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, initaltask.o(.text._Z11DebugPrintfPhPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = DebugPrintf(unsigned char*, char const*, ...) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[a0]"></a>INSThreadFun(unsigned long)</STRONG> (Thumb, 684 bytes, Stack size 168 bytes, imutask.o(.text._Z12INSThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = INSThreadFun(unsigned long) &rArr; IMU_QuaternionEKF_Update &rArr; Kalman_Filter_Update &rArr; Kalman_Filter_SetK &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Update
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Reset
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep_until
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadIMUCal(float*, float*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[a1]"></a>TemThreadFun(unsigned long)</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, imutask.o(.text._Z12TemThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TemThreadFun(unsigned long) &rArr; _tx_thread_sleep_until &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep_until
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cPIDInc::PID_Cal(float)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[a2]"></a>MotorThreadFun(unsigned long)</STRONG> (Thumb, 1092 bytes, Stack size 160 bytes, motortask.o(.text._Z14MotorThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = MotorThreadFun(unsigned long) &rArr; CANFilterConfig() &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep_until
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::InputLink(float, float)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMMotor::MITTransmit()
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMMotor::MITUpdate(float, float, float, float, float)
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMMotor::DisableMotor()
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMMotor::EnableMotor()
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANFilterConfig()
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[a6]"></a>UART5ThreadFun(unsigned long)</STRONG> (Thumb, 428 bytes, Stack size 32 bytes, refertask.o(.text._Z14UART5ThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART5ThreadFun(unsigned long) &rArr; cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int) &rArr; cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_receive
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int)
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_BufferConfig(unsigned char*, unsigned short)
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Transmit(unsigned char)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Update(unsigned char*, unsigned short)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Init(DMA_TypeDef*, unsigned int)
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::RefDataConfig(robot_referee_status_t*)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[1eb]"></a>CANFilterConfig()</STRONG> (Thumb, 158 bytes, Stack size 64 bytes, motortask.o(.text._Z15CANFilterConfigv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = CANFilterConfig() &rArr; HAL_FDCAN_ConfigFilter
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ActivateNotification
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_Start
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigGlobalFilter
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[a7]"></a>DrawUIThreadFun(unsigned long)</STRONG> (Thumb, 4056 bytes, Stack size 128 bytes, refertask.o(.text._Z15DrawUIThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = DrawUIThreadFun(unsigned long) &rArr; cUI::CharacterUpdate(unsigned char*, eUI_LAYER_ID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned char, unsigned short, unsigned short, char const*, ...) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Transmit_DMA(unsigned char*, unsigned short)
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::CharacterUpdate(unsigned char*, eUI_LAYER_ID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned char, unsigned short, unsigned short, char const*, ...)
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GraphGroupUpdateCircle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GraphGroupUpdateRectangle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GraphGroupUpdateLine(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GrapgGroupPack(eUI_GROUP, unsigned char*)
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GraphGroupReg(group_config_t*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::LayerDelete(unsigned char*, eUI_LAYER_ID)
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::SetRobotID(unsigned short)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cQCS::Pitch(float*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[a3]"></a>MotorWThreadFun(unsigned long)</STRONG> (Thumb, 668 bytes, Stack size 152 bytes, motortask.o(.text._Z15MotorWThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MotorWThreadFun(unsigned long) &rArr; cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep_until
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_BufferConfig(unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRS485::BusTransmit(unsigned char*, unsigned char)
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRS485::SetUART(cUART*, GPIO_TypeDef*, unsigned int)
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotor::SetIqControl(unsigned char*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotor::SetParams(Motor_Measurement_t*)
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotor::SetMsr(Motor_Measurement_t*)
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotor::SetIqConst(float)
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFilterBTW2_40Hz::BTW2Cal(float)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[9f]"></a>RemoterThreadFun(unsigned long)</STRONG> (Thumb, 600 bytes, Stack size 16 bytes, remotertask.o(.text._Z16RemoterThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RemoterThreadFun(unsigned long) &rArr; cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_receive
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_BufferConfig(unsigned char*, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_flush
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[a4]"></a>RoboCTRThreadFun(unsigned long)</STRONG> (Thumb, 4800 bytes, Stack size 448 bytes, controltask.o(.text._Z16RoboCTRThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 568 + Unknown Stack Size
<LI>Call Chain = RoboCTRThreadFun(unsigned long) &rArr; std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep_until
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cPIDPla::Reset()
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&)
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[a5]"></a>CloseLoopThreadFun(unsigned long)</STRONG> (Thumb, 5888 bytes, Stack size 280 bytes, closelooptask.o(.text._Z18CloseLoopThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = CloseLoopThreadFun(unsigned long) &rArr; VelFusionKF_Update &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Reset
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep_until
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cQCS::Yaw(float*)
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cQCS::Pitch(float*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cQCS::Roll(float*)
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cPIDSpf::PID_Cal(float, float)
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cPIDPla::Reset()
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cPIDPla::PID_Cal(float)
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotor::UpdateTorque(float)
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCRevCal_Radian(float*, float*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCVelCal(float*, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCRevCal(float*, float*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCCal(float*, float*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFilterBTW2_40Hz::BTW2Cal(float)
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMMotor::MITUpdate(float, float, float, float, float)
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLQR::RefreshLQRK(float, unsigned char)
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_quaternion_product_f32
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_time_get
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_init_f32
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[b3]"></a>cLoopTheta::PID_Init()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, controltask.o(.text._ZN10cLoopTheta8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV10cLoopTheta)
</UL>
<P><STRONG><a name="[1e3]"></a>cMotorUnit::cMotorUnit__sub_object()</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, motortask.o(.text._ZN10cMotorUnitC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = cMotorUnit::cMotorUnit__sub_object() &rArr; arm_biquad_cascade_df1_init_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_init_f32
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_MotorTask.cpp
</UL>

<P><STRONG><a name="[21e]"></a>cLinkSolver::VMCRevCal_Radian(float*, float*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, linksolver.o(.text._ZN11cLinkSolver16VMCRevCal_RadianEPfS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cLinkSolver::VMCRevCal_Radian(float*, float*) &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[226]"></a>cLinkSolver::VMCCal(float*, float*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, linksolver.o(.text._ZN11cLinkSolver6VMCCalEPfS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cLinkSolver::VMCCal(float*, float*) &rArr; cLinkSolver::VMCUpdate()
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1ee]"></a>cLinkSolver::Resolve()</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, linksolver.o(.text._ZN11cLinkSolver7ResolveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cLinkSolver::Resolve()
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1ed]"></a>cLinkSolver::InputLink(float, float)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, linksolver.o(.text._ZN11cLinkSolver9InputLinkEff))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[223]"></a>cLinkSolver::VMCRevCal(float*, float*)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, linksolver.o(.text._ZN11cLinkSolver9VMCRevCalEPfS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cLinkSolver::VMCRevCal(float*, float*) &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[22c]"></a>cLinkSolver::VMCUpdate()</STRONG> (Thumb, 462 bytes, Stack size 32 bytes, linksolver.o(.text._ZN11cLinkSolver9VMCUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cLinkSolver::VMCUpdate()
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_cos_f32
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_sin_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCRevCal_Radian(float*, float*)
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCVelCal(float*, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCRevCal(float*, float*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCCal(float*, float*)
</UL>

<P><STRONG><a name="[21f]"></a>cLinkSolver::VMCVelCal(float*, float*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, linksolver.o(.text._ZN11cLinkSolver9VMCVelCalEPfS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cLinkSolver::VMCVelCal(float*, float*) &rArr; cLinkSolver::VMCUpdate()
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[b5]"></a>cLoopEscape::PID_Init()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, controltask.o(.text._ZN11cLoopEscape8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV11cLoopEscape)
</UL>
<P><STRONG><a name="[b6]"></a>cLoopLen_Dot::PID_Init()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, controltask.o(.text._ZN12cLoopLen_Dot8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV12cLoopLen_Dot)
</UL>
<P><STRONG><a name="[b7]"></a>cLoopLen_Spf::PID_Init()</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, controltask.o(.text._ZN12cLoopLen_Spf8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV12cLoopLen_Spf)
</UL>
<P><STRONG><a name="[b8]"></a>cLooplen_Stop::PID_Init()</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, controltask.o(.text._ZN13cLooplen_Stop8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV13cLooplen_Stop)
</UL>
<P><STRONG><a name="[b9]"></a>cLoopTheta_Spf::PID_Init()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, controltask.o(.text._ZN14cLoopTheta_Spf8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV14cLoopTheta_Spf)
</UL>
<P><STRONG><a name="[ba]"></a>cLooplen_Ready::PID_Init()</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, controltask.o(.text._ZN14cLooplen_Ready8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV14cLooplen_Ready)
</UL>
<P><STRONG><a name="[bb]"></a>cLoopRollOffset::PID_Init()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, controltask.o(.text._ZN15cLoopRollOffset8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV15cLoopRollOffset)
</UL>
<P><STRONG><a name="[213]"></a>cFilterBTW2_40Hz::BTW2Cal(float)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, filter.o(.text._ZN16cFilterBTW2_40Hz7BTW2CalEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = cFilterBTW2_40Hz::BTW2Cal(float) &rArr; arm_biquad_cascade_df1_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_biquad_cascade_df1_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1ff]"></a>cUI::SetRobotID(unsigned short)</STRONG> (Thumb, 476 bytes, Stack size 0 bytes, referdriver.o(.text._ZN3cUI10SetRobotIDEt))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[201]"></a>cUI::LayerDelete(unsigned char*, eUI_LAYER_ID)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, referdriver.o(.text._ZN3cUI11LayerDeleteEPh12eUI_LAYER_ID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cUI::LayerDelete(unsigned char*, eUI_LAYER_ID) &rArr; cal_crc8_table
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_table
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[200]"></a>cUI::GraphGroupReg(group_config_t*)</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, referdriver.o(.text._ZN3cUI13GraphGroupRegEP14group_config_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cUI::GraphGroupReg(group_config_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[207]"></a>cUI::GrapgGroupPack(eUI_GROUP, unsigned char*)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, referdriver.o(.text._ZN3cUI14GrapgGroupPackE9eUI_GROUPPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cUI::GrapgGroupPack(eUI_GROUP, unsigned char*) &rArr; cal_crc8_table
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_table
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[203]"></a>cUI::CharacterUpdate(unsigned char*, eUI_LAYER_ID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned char, unsigned short, unsigned short, char const*, ...)</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, referdriver.o(.text._ZN3cUI15CharacterUpdateEPh12eUI_LAYER_IDPc18eUI_GRAPHE_OPERATE9eUI_COLORhttPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = cUI::CharacterUpdate(unsigned char*, eUI_LAYER_ID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned char, unsigned short, unsigned short, char const*, ...) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc8_table
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16_table
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[204]"></a>cUI::GraphGroupUpdateLine(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, referdriver.o(.text._ZN3cUI20GraphGroupUpdateLineE9eUI_GROUP13eUI_GROUP_GIDPc18eUI_GRAPHE_OPERATE9eUI_COLORttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cUI::GraphGroupUpdateLine(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[205]"></a>cUI::GraphGroupUpdateCircle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, referdriver.o(.text._ZN3cUI22GraphGroupUpdateCircleE9eUI_GROUP13eUI_GROUP_GIDPc18eUI_GRAPHE_OPERATE9eUI_COLORtttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cUI::GraphGroupUpdateCircle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[206]"></a>cUI::GraphGroupUpdateRectangle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, referdriver.o(.text._ZN3cUI25GraphGroupUpdateRectangleE9eUI_GROUP13eUI_GROUP_GIDPc18eUI_GRAPHE_OPERATE9eUI_COLORttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cUI::GraphGroupUpdateRectangle(eUI_GROUP, eUI_GROUP_GID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[235]"></a>cDMA::ClearFlag_HT()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, dmaflag_ll.o(.text._ZN4cDMA12ClearFlag_HTEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Init(DMA_TypeDef*, unsigned int)
</UL>

<P><STRONG><a name="[234]"></a>cDMA::ClearFlag_TC()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, dmaflag_ll.o(.text._ZN4cDMA12ClearFlag_TCEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int)
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Rx()
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Recieve_DMA(unsigned char**, unsigned short)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::IRQ_Tx()
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Transmit_DMA(unsigned char*, unsigned short)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Init(DMA_TypeDef*, unsigned int)
</UL>

<P><STRONG><a name="[236]"></a>cDMA::ClearFlag_TE()</STRONG> (Thumb, 106 bytes, Stack size 0 bytes, dmaflag_ll.o(.text._ZN4cDMA12ClearFlag_TEEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Init(DMA_TypeDef*, unsigned int)
</UL>

<P><STRONG><a name="[233]"></a>cDMA::Config(DMA_TypeDef*, unsigned int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dmaflag_ll.o(.text._ZN4cDMA6ConfigEP11DMA_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int)
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int)
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Init(DMA_TypeDef*, unsigned int)
</UL>

<P><STRONG><a name="[bc]"></a>cIMU::PID_Init()</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, imutask.o(.text._ZN4cIMU8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> imutask.o(.rodata._ZTV4cIMU)
</UL>
<P><STRONG><a name="[224]"></a>cLQR::RefreshLQRK(float, unsigned char)</STRONG> (Thumb, 1840 bytes, Stack size 128 bytes, closelooptask.o(.text._ZN4cLQR11RefreshLQRKEfh))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = cLQR::RefreshLQRK(float, unsigned char) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[21b]"></a>cQCS::Yaw(float*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qcslite.o(.text._ZN4cQCS3YawEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cQCS::Yaw(float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[21c]"></a>cQCS::Roll(float*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, qcslite.o(.text._ZN4cQCS4RollEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cQCS::Roll(float*)
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_atan2_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[20a]"></a>cQCS::Pitch(float*)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, qcslite.o(.text._ZN4cQCS5PitchEPf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cQCS::Pitch(float*) &rArr; __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f9]"></a>cRef::M2M_Update(unsigned char*, unsigned short)</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, referdriver.o(.text._ZN4cRef10M2M_UpdateEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cRef::M2M_Update(unsigned char*, unsigned short) &rArr; cal_crc16_table
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_crc16_table
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1fa]"></a>cRef::M2M_Transmit(unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, referdriver.o(.text._ZN4cRef12M2M_TransmitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cRef::M2M_Transmit(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f5]"></a>cRef::RefDataConfig(robot_referee_status_t*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, referdriver.o(.text._ZN4cRef13RefDataConfigEP22robot_referee_status_t))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f7]"></a>cRef::M2M_Init(DMA_TypeDef*, unsigned int)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, referdriver.o(.text._ZN4cRef8M2M_InitEP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cRef::M2M_Init(DMA_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TE()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_HT()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::Config(DMA_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1db]"></a>cUART::Recieve_DMA(unsigned char**, unsigned short)</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, uart_ll.o(.text._ZN5cUART11Recieve_DMAEPPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cUART::Recieve_DMA(unsigned char**, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[202]"></a>cUART::Transmit_DMA(unsigned char*, unsigned short)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, uart_ll.o(.text._ZN5cUART12Transmit_DMAEPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cUART::Transmit_DMA(unsigned char*, unsigned short)
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f4]"></a>cUART::UART_BufferConfig(unsigned char*, unsigned short)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, uart_ll.o(.text._ZN5cUART17UART_BufferConfigEPht))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[bd]"></a>cUART::Delay()</STRONG> (Thumb, 102 bytes, Stack size 4 bytes, refertask.o(.text._ZN5cUART5DelayEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = cUART::Delay()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> refertask.o(.rodata._ZTV4cRef)
<LI> initaltask.o(.rodata._ZTV5cUART)
<LI> remotertask.o(.rodata._ZTV8cRemoter)
</UL>
<P><STRONG><a name="[1d9]"></a>cUART::IRQ_Rx()</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, uart_ll.o(.text._ZN5cUART6IRQ_RxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cUART::IRQ_Rx()
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART7_IRQHandler
</UL>

<P><STRONG><a name="[148]"></a>cUART::IRQ_Tx()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, uart_ll.o(.text._ZN5cUART6IRQ_TxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cUART::IRQ_Tx()
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream1_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Stream3_IRQHandler
</UL>

<P><STRONG><a name="[237]"></a>cUART::Transmit(unsigned char*, unsigned short, unsigned int)</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, uart_ll.o(.text._ZN5cUART8TransmitEPhtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cUART::Transmit(unsigned char*, unsigned short, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRS485::BusTransmit(unsigned char*, unsigned char)
</UL>

<P><STRONG><a name="[229]"></a>cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int)</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, uart_ll.o(.text._ZN5cUART9UART_InitEP13USART_TypeDefP11DMA_TypeDefj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TE()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_HT()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::Config(DMA_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[20c]"></a>cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, uart_ll.o(.text._ZN5cUART9UART_InitEP13USART_TypeDefP11DMA_TypeDefjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TE()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_HT()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::Config(DMA_TypeDef*, unsigned int)
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int)
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f6]"></a>cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int)</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, uart_ll.o(.text._ZN5cUART9UART_InitEP13USART_TypeDefP11DMA_TypeDefjhS3_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char, DMA_TypeDef*, unsigned int) &rArr; cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int, unsigned char)
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TE()
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_HT()
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::ClearFlag_TC()
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cDMA::Config(DMA_TypeDef*, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[210]"></a>cMotor::SetIqConst(float)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lkmotordriver.o(.text._ZN6cMotor10SetIqConstEf))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1df]"></a>cMotor::ReceiveIqMsr(unsigned char*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lkmotordriver.o(.text._ZN6cMotor12ReceiveIqMsrEPh))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[211]"></a>cMotor::SetIqControl(unsigned char*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lkmotordriver.o(.text._ZN6cMotor12SetIqControlEPh))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[21a]"></a>cMotor::UpdateTorque(float)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, lkmotordriver.o(.text._ZN6cMotor12UpdateTorqueEf))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[20e]"></a>cMotor::SetMsr(Motor_Measurement_t*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lkmotordriver.o(.text._ZN6cMotor6SetMsrEP19Motor_Measurement_t))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[20f]"></a>cMotor::SetParams(Motor_Measurement_t*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lkmotordriver.o(.text._ZN6cMotor9SetParamsEP19Motor_Measurement_t))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[212]"></a>cRS485::BusTransmit(unsigned char*, unsigned char)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, rs485.o(.text._ZN6cRS48511BusTransmitEPhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cRS485::BusTransmit(unsigned char*, unsigned char) &rArr; cUART::Transmit(unsigned char*, unsigned short, unsigned int)
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Transmit(unsigned char*, unsigned short, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[20d]"></a>cRS485::SetUART(cUART*, GPIO_TypeDef*, unsigned int)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rs485.o(.text._ZN6cRS4857SetUARTEP5cUARTP12GPIO_TypeDefj))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[be]"></a>cDM8006::CAN_Transmit(unsigned char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motortask.o(.text._ZN7cDM800612CAN_TransmitEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = cDM8006::CAN_Transmit(unsigned char*) &rArr; HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_AddMessageToTxFifoQ
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motortask.o(.rodata._ZTV7cDM8006)
</UL>
<P><STRONG><a name="[bf]"></a>cKF9025::Init()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, motortask.o(.text._ZN7cKF90254InitEv))
<BR>[Address Reference Count : 1]<UL><LI> motortask.o(.rodata._ZTV7cKF9025)
</UL>
<P><STRONG><a name="[1ea]"></a>cPIDInc::PID_Cal(float)</STRONG> (Thumb, 212 bytes, Stack size 0 bytes, pid.o(.text._ZN7cPIDInc7PID_CalEf))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[b4]"></a>cPIDPla::ForwardLoop()</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pid.o(.text._ZN7cPIDPla11ForwardLoopEv))
<BR>[Address Reference Count : 11]<UL><LI> controltask.o(.rodata._ZTV11cLoopEscape)
<LI> controltask.o(.rodata._ZTV8cLoopLen)
<LI> controltask.o(.rodata._ZTV12cLoopLen_Dot)
<LI> controltask.o(.rodata._ZTV14cLooplen_Ready)
<LI> controltask.o(.rodata._ZTV13cLooplen_Stop)
<LI> controltask.o(.rodata._ZTV8cLoopCFG)
<LI> controltask.o(.rodata._ZTV9cLoopRoll)
<LI> controltask.o(.rodata._ZTV8cLoopYaw)
<LI> controltask.o(.rodata._ZTV9cLoopGyro)
<LI> controltask.o(.rodata._ZTV15cLoopRollOffset)
<LI> controltask.o(.rodata._ZTV10cLoopTheta)
</UL>
<P><STRONG><a name="[217]"></a>cPIDPla::Reset()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pid.o(.text._ZN7cPIDPla5ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCTRThreadFun(unsigned long)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[21d]"></a>cPIDPla::PID_Cal(float)</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, pid.o(.text._ZN7cPIDPla7PID_CalEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cPIDPla::PID_Cal(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[225]"></a>cPIDSpf::PID_Cal(float, float)</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, pid.o(.text._ZN7cPIDSpf7PID_CalEff))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f0]"></a>cDMMotor::EnableMotor()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dmdriver.o(.text._ZN8cDMMotor11EnableMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDMMotor::EnableMotor()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f3]"></a>cDMMotor::MITTransmit()</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, dmdriver.o(.text._ZN8cDMMotor11MITTransmitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDMMotor::MITTransmit()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f2]"></a>cDMMotor::DisableMotor()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dmdriver.o(.text._ZN8cDMMotor12DisableMotorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cDMMotor::DisableMotor()
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[16f]"></a>cDMMotor::MessageDecode(unsigned char*)</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, dmdriver.o(.text._ZN8cDMMotor13MessageDecodeEPh))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
</UL>

<P><STRONG><a name="[1ec]"></a>cDMMotor::MITUpdate(float, float, float, float, float)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dmdriver.o(.text._ZN8cDMMotor9MITUpdateEfffff))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[c0]"></a>cLoopCFG::PID_Init()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, controltask.o(.text._ZN8cLoopCFG8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV8cLoopCFG)
</UL>
<P><STRONG><a name="[c1]"></a>cLoopLen::PID_Init()</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, controltask.o(.text._ZN8cLoopLen8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV8cLoopLen)
</UL>
<P><STRONG><a name="[c2]"></a>cLoopYaw::PID_Init()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, controltask.o(.text._ZN8cLoopYaw8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV8cLoopYaw)
</UL>
<P><STRONG><a name="[16a]"></a>cRMMotor::UpdateMotorRec(unsigned char*)</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rmmotordriver.o(.text._ZN8cRMMotor14UpdateMotorRecEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cRMMotor::UpdateMotorRec(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[14a]"></a>cICM42688::ReadAccelGyro()</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, icm42688.o(.text._ZN9cICM4268813ReadAccelGyroEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cICM42688::ReadAccelGyro() &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[14b]"></a>cICM42688::ReadTem()</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, icm42688.o(.text._ZN9cICM426887ReadTemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = cICM42688::ReadTem() &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>cLoopGyro::PID_Init()</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, controltask.o(.text._ZN9cLoopGyro8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV9cLoopGyro)
</UL>
<P><STRONG><a name="[c4]"></a>cLoopRoll::PID_Init()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, controltask.o(.text._ZN9cLoopRoll8PID_InitEv))
<BR>[Address Reference Count : 1]<UL><LI> controltask.o(.rodata._ZTV9cLoopRoll)
</UL>
<P><STRONG><a name="[238]"></a>std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, string.cpp.o(.text._ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE25__init_copy_ctor_externalEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&)
</UL>

<P><STRONG><a name="[23b]"></a>void std::__2::__tree_balance_after_insert[abi:v16000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, controltask.o(.text._ZNSt3__227__tree_balance_after_insertB6v16000IPNS_16__tree_node_baseIPvEEEEvT_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = void std::__2::__tree_balance_after_insert[abi:v16000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&)
</UL>

<P><STRONG><a name="[23a]"></a>std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__find_equal&lang;int&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*&, int const&)</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, controltask.o(.text._ZNSt3__26__treeINS_12__value_typeIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS5_IS8_EEE12__find_equalIiEERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorIS8_PNS_11__tree_nodeIS8_SH_EEiEERPNS_15__tree_end_nodeISJ_EESK_RKT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__find_equal&lang;int&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*&, int const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&)
</UL>

<P><STRONG><a name="[216]"></a>std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&)</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, controltask.o(.text._ZNSt3__26__treeINS_12__value_typeIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS5_IS8_EEE30__emplace_hint_unique_key_argsIiJRKNS_4pairIKiS7_EEEEENSG_INS_15__tree_iteratorIS8_PNS_11__tree_nodeIS8_PvEEiEEbEENS_21__tree_const_iteratorIS8_SP_iEERKT_DpOT0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&) &rArr; std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int) &rArr; operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__2::__tree_balance_after_insert[abi:v16000]&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;(std::__2::__tree_node_base&lang;void*&rang;*, std::__2::__tree_node_base&lang;void*&rang;*)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int)
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::__tree_node_base&lang;void*&rang;*& std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__find_equal&lang;int&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, std::__2::__tree_end_node&lang;std::__2::__tree_node_base&lang;void*&rang;*&rang;*&, std::__2::__tree_node_base&lang;void*&rang;*&, int const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCTRThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[23c]"></a>std::get_new_handler()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cxa_handlers.cpp.o(.text._ZSt15get_new_handlerv))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned int)
</UL>

<P><STRONG><a name="[218]"></a>operator delete(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.cpp.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator delete(void*) &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCTRThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[214]"></a>operator new(unsigned int)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, new.cpp.o(.text._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = operator new(unsigned int) &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::get_new_handler()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;::__init_copy_ctor_external(char const*, unsigned int)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::pair&lang;std::__2::__tree_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, bool&rang; std::__2::__tree&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__map_value_compare&lang;int, std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::less&lang;int&rang;, true&rang;, std::__2::allocator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;&rang;&rang;::__emplace_hint_unique_key_args&lang;int, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&&rang;(std::__2::__tree_const_iterator&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, std::__2::__tree_node&lang;std::__2::__value_type&lang;int, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang;, void*&rang;*, int&rang;, int const&, std::__2::pair&lang;int const, std::__2::basic_string&lang;char, std::__2::char_traits&lang;char&rang;, std::__2::allocator&lang;char&rang;&rang;&rang; const&)
</UL>

<P><STRONG><a name="[23d]"></a>_tx_byte_allocate</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, tx_byte_allocate.o(.text._tx_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_byte_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
</UL>

<P><STRONG><a name="[ae]"></a>_tx_byte_pool_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_byte_pool_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_byte_allocate.o(.text._tx_byte_allocate)
<LI> tx_byte_pool_cleanup.o(.text._tx_byte_pool_cleanup)
</UL>
<P><STRONG><a name="[241]"></a>_tx_byte_pool_create</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, tx_byte_pool_create.o(.text._tx_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _tx_byte_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
</UL>

<P><STRONG><a name="[23e]"></a>_tx_byte_pool_search</STRONG> (Thumb, 236 bytes, Stack size 20 bytes, tx_byte_pool_search.o(.text._tx_byte_pool_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _tx_byte_pool_search
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>

<P><STRONG><a name="[242]"></a>_tx_initialize_high_level</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tx_initialize_high_level.o(.text._tx_initialize_high_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_high_level &rArr; _tx_timer_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_initialize
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[1c8]"></a>_tx_initialize_kernel_enter</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, tx_initialize_kernel_enter.o(.text._tx_initialize_kernel_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; Task_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_low_level
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
</UL>

<P><STRONG><a name="[af]"></a>_tx_queue_cleanup</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tx_queue_cleanup.o(.text._tx_queue_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_queue_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 3]<UL><LI> tx_queue_cleanup.o(.text._tx_queue_cleanup)
<LI> tx_queue_send.o(.text._tx_queue_send)
<LI> tx_queue_receive.o(.text._tx_queue_receive)
</UL>
<P><STRONG><a name="[248]"></a>_tx_queue_create</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, tx_queue_create.o(.text._tx_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = _tx_queue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_create
</UL>

<P><STRONG><a name="[249]"></a>_tx_queue_flush</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tx_queue_flush.o(.text._tx_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _tx_queue_flush &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_flush
</UL>

<P><STRONG><a name="[24b]"></a>_tx_queue_receive</STRONG> (Thumb, 1130 bytes, Stack size 40 bytes, tx_queue_receive.o(.text._tx_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _tx_queue_receive &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_receive
</UL>

<P><STRONG><a name="[24c]"></a>_tx_queue_send</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, tx_queue_send.o(.text._tx_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _tx_queue_send &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_send
</UL>

<P><STRONG><a name="[b0]"></a>_tx_semaphore_cleanup</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_semaphore_cleanup &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 2]<UL><LI> tx_semaphore_cleanup.o(.text._tx_semaphore_cleanup)
<LI> tx_semaphore_get.o(.text._tx_semaphore_get)
</UL>
<P><STRONG><a name="[253]"></a>_tx_semaphore_create</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tx_semaphore_create.o(.text._tx_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _tx_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[24d]"></a>_tx_semaphore_get</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, tx_semaphore_get.o(.text._tx_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _tx_semaphore_get &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_get
</UL>

<P><STRONG><a name="[24e]"></a>_tx_semaphore_put</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tx_semaphore_put.o(.text._tx_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_put
</UL>

<P><STRONG><a name="[24f]"></a>_tx_thread_create</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, tx_thread_create.o(.text._tx_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_stack_build
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
</UL>

<P><STRONG><a name="[243]"></a>_tx_thread_initialize</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tx_thread_initialize.o(.text._tx_thread_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _tx_thread_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[b2]"></a>_tx_thread_shell_entry</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tx_thread_shell_entry.o(.text._tx_thread_shell_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_thread_shell_entry &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[1e5]"></a>_tx_thread_sleep</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, tx_thread_sleep.o(.text._tx_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugThreadFun(unsigned long)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedThreadFun(unsigned long)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemThreadFun(unsigned long)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_Init()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCTRThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1e8]"></a>_tx_thread_sleep_until</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, tx_thread_sleep_until.o(.text._tx_thread_sleep_until))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _tx_thread_sleep_until &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemThreadFun(unsigned long)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCTRThreadFun(unsigned long)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[24a]"></a>_tx_thread_system_preempt_check</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, tx_thread_system_preempt_check.o(.text._tx_thread_system_preempt_check))
<BR><BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_flush
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_thread_create
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_queue_create
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_semaphore_create
</UL>

<P><STRONG><a name="[240]"></a>_tx_thread_system_resume</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, tx_thread_system_resume.o(.text._tx_thread_system_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_deactivate
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_timeout
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_cleanup
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_flush
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_cleanup
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_cleanup
</UL>

<P><STRONG><a name="[23f]"></a>_tx_thread_system_suspend</STRONG> (Thumb, 524 bytes, Stack size 24 bytes, tx_thread_system_suspend.o(.text._tx_thread_system_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_system_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep_until
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_shell_entry
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>

<P><STRONG><a name="[109]"></a>_tx_thread_time_slice</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, tx_thread_time_slice.o(.text._tx_thread_time_slice))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[b1]"></a>_tx_thread_timeout</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, tx_thread_timeout.o(.text._tx_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _tx_thread_timeout &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_thread_create.o(.text._tx_thread_create)
</UL>
<P><STRONG><a name="[1e9]"></a>_tx_time_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tx_time_get.o(.text._tx_time_get))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemThreadFun(unsigned long)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RoboCTRThreadFun(unsigned long)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[108]"></a>_tx_timer_expiration_process</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, tx_timer_expiration_process.o(.text._tx_timer_expiration_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _tx_timer_expiration_process
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_timer_interrupt
</UL>

<P><STRONG><a name="[244]"></a>_tx_timer_initialize</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tx_timer_initialize.o(.text._tx_timer_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _tx_timer_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_high_level
</UL>

<P><STRONG><a name="[252]"></a>_tx_timer_system_activate</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, tx_timer_system_activate.o(.text._tx_timer_system_activate))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_suspend
</UL>

<P><STRONG><a name="[251]"></a>_tx_timer_system_deactivate</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, tx_timer_system_deactivate.o(.text._tx_timer_system_deactivate))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_resume
</UL>

<P><STRONG><a name="[1a7]"></a>_txe_byte_allocate</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, txe_byte_allocate.o(.text._txe_byte_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _txe_byte_allocate &rArr; _tx_byte_allocate &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorWThreadFun(unsigned long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1d5]"></a>_txe_byte_pool_create</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, txe_byte_pool_create.o(.text._txe_byte_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _txe_byte_pool_create &rArr; _tx_byte_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_byte_pool_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Init
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_application_define
</UL>

<P><STRONG><a name="[1d7]"></a>_txe_queue_create</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, txe_queue_create.o(.text._txe_queue_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _txe_queue_create &rArr; _tx_queue_create
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Init
</UL>

<P><STRONG><a name="[215]"></a>_txe_queue_flush</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, txe_queue_flush.o(.text._txe_queue_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _txe_queue_flush &rArr; _tx_queue_flush &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1f8]"></a>_txe_queue_receive</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, txe_queue_receive.o(.text._txe_queue_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _txe_queue_receive &rArr; _tx_queue_receive &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoterThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1da]"></a>_txe_queue_send</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, txe_queue_send.o(.text._txe_queue_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _txe_queue_send &rArr; _tx_queue_send &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_queue_send
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[1d6]"></a>_txe_semaphore_create</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, txe_semaphore_create.o(.text._txe_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _txe_semaphore_create &rArr; _tx_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Init
</UL>

<P><STRONG><a name="[1f1]"></a>_txe_semaphore_get</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, txe_semaphore_get.o(.text._txe_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _txe_semaphore_get &rArr; _tx_semaphore_get &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5ThreadFun(unsigned long)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[149]"></a>_txe_semaphore_put</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, txe_semaphore_put.o(.text._txe_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _txe_semaphore_put &rArr; _tx_semaphore_put &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream0_IRQHandler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo1Callback
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[1d8]"></a>_txe_thread_create</STRONG> (Thumb, 338 bytes, Stack size 64 bytes, txe_thread_create.o(.text._txe_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_create
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_system_preempt_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Init
</UL>

<P><STRONG><a name="[254]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, abort_message.cpp.o(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[22d]"></a>arm_atan2_f32</STRONG> (Thumb, 908 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_atan2_f32))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cQCS::Yaw(float*)
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cQCS::Roll(float*)
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve()
</UL>

<P><STRONG><a name="[22e]"></a>arm_biquad_cascade_df1_f32</STRONG> (Thumb, 514 bytes, Stack size 44 bytes, filteringfunctions.o(.text.arm_biquad_cascade_df1_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arm_biquad_cascade_df1_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cFilterBTW2_40Hz::BTW2Cal(float)
</UL>

<P><STRONG><a name="[219]"></a>arm_biquad_cascade_df1_init_f32</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, filteringfunctions.o(.text.arm_biquad_cascade_df1_init_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = arm_biquad_cascade_df1_init_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotorUnit::cMotorUnit__sub_object()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[209]"></a>arm_cos_f32</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_cos_f32))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCUpdate()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1a3]"></a>arm_mat_add_f32</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, matrixfunctions.o(.text.arm_mat_add_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_mat_add_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
</UL>

<P><STRONG><a name="[19b]"></a>arm_mat_init_f32</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, matrixfunctions.o(.text.arm_mat_init_f32))
<BR><BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_Init
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Init
</UL>

<P><STRONG><a name="[1a4]"></a>arm_mat_inverse_f32</STRONG> (Thumb, 2700 bytes, Stack size 120 bytes, matrixfunctions.o(.text.arm_mat_inverse_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCRevCal_Radian(float*, float*)
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCRevCal(float*, float*)
</UL>

<P><STRONG><a name="[1a2]"></a>arm_mat_mult_f32</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, matrixfunctions.o(.text.arm_mat_mult_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = arm_mat_mult_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1a6]"></a>arm_mat_sub_f32</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, matrixfunctions.o(.text.arm_mat_sub_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = arm_mat_sub_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[1a1]"></a>arm_mat_trans_f32</STRONG> (Thumb, 220 bytes, Stack size 44 bytes, matrixfunctions.o(.text.arm_mat_trans_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = arm_mat_trans_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VelFusionKF_Update
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_Update
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Kalman_Filter_SetK
</UL>

<P><STRONG><a name="[221]"></a>arm_quaternion_product_f32</STRONG> (Thumb, 672 bytes, Stack size 0 bytes, quaternionmathfunctions.o(.text.arm_quaternion_product_f32))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[208]"></a>arm_sin_f32</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, fastmathfunctions.o(.text.arm_sin_f32))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::VMCUpdate()
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLinkSolver::Resolve()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[230]"></a>cal_crc16_table</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, crc16.o(.text.cal_crc16_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cal_crc16_table
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::CharacterUpdate(unsigned char*, eUI_LAYER_ID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned char, unsigned short, unsigned short, char const*, ...)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GrapgGroupPack(eUI_GROUP, unsigned char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::LayerDelete(unsigned char*, eUI_LAYER_ID)
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cRef::M2M_Update(unsigned char*, unsigned short)
</UL>

<P><STRONG><a name="[22f]"></a>cal_crc8_table</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, crc8.o(.text.cal_crc8_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cal_crc8_table
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::CharacterUpdate(unsigned char*, eUI_LAYER_ID, char*, eUI_GRAPHE_OPERATE, eUI_COLOR, unsigned char, unsigned short, unsigned short, char const*, ...)
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::GrapgGroupPack(eUI_GROUP, unsigned char*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUI::LayerDelete(unsigned char*, eUI_LAYER_ID)
</UL>

<P><STRONG><a name="[1de]"></a>data_check</STRONG> (Thumb, 140 bytes, Stack size 20 bytes, lkmotordriver.o(.text.data_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = data_check
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>data_process</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, usart.o(.text.data_process))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>

<P><STRONG><a name="[fc]"></a>main</STRONG> (Thumb, 442 bytes, Stack size 8 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_ThreadX_Init &rArr; _tx_initialize_kernel_enter &rArr; tx_application_define &rArr; Task_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ThreadX_Init
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_OPAMP1_Init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC1_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN2_Init
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_FDCAN1_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM8_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART5_Init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM16_Init
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART7_Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_UART4_Init
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PeriphCommonClock_Config
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy8
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[246]"></a>tx_application_define</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, app_azure_rtos.o(.text.tx_application_define))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = tx_application_define &rArr; Task_Init &rArr; _txe_thread_create &rArr; _tx_thread_create &rArr; _tx_thread_system_resume
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Init
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_pool_create
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ThreadX_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_initialize_kernel_enter
</UL>

<P><STRONG><a name="[227]"></a>__cxa_guard_acquire</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __cxa_guard_acquire &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[228]"></a>__cxa_guard_release</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cxa_guard.cpp.o(.text.unlikely.__cxa_guard_release))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[131]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25b]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[25a]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[25c]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[25d]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[132]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[133]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[25e]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[135]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[262]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[1a5]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_acosf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IMU_QuaternionEKF_xhatUpdate
</UL>

<P><STRONG><a name="[232]"></a>__hardfp_asinf</STRONG> (Thumb, 258 bytes, Stack size 16 bytes, asinf.o(i.__hardfp_asinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_asinf &rArr; sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cQCS::Pitch(float*)
</UL>

<P><STRONG><a name="[222]"></a>__hardfp_atan2f</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, atan2f.o(i.__hardfp_atan2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __hardfp_atan2f &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[260]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[264]"></a>__mathlib_flt_infnan2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan2))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
</UL>

<P><STRONG><a name="[261]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[263]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2f
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
</UL>

<P><STRONG><a name="[127]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[25f]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sqrtf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asinf
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>

<P><STRONG><a name="[99]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[f5]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadTem()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLQR::RefreshLQRK(float, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[265]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadTem()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLQR::RefreshLQRK(float, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[268]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[16b]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
</UL>

<P><STRONG><a name="[2b7]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[22a]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[2b8]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[16c]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadTem()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FDCAN_RxFifo0Callback
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLQR::RefreshLQRK(float, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[26b]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[267]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[26a]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[220]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[26c]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[20b]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DrawUIThreadFun(unsigned long)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cICM42688::ReadTem()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugThreadFun(unsigned long)
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cLQR::RefreshLQRK(float, unsigned char)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CloseLoopThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[26e]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[26f]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[ee]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[2b9]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[2ba]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[266]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[d0]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[d4]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[153]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 288 bytes, Stack size 0 bytes, stm32h7xx_hal_dma.o(.text.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[181]"></a>SPI_CloseTransfer</STRONG> (Thumb, 208 bytes, Stack size 0 bytes, stm32h7xx_hal_spi.o(.text.SPI_CloseTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[ab]"></a>UART_RxISR_8BIT</STRONG> (Thumb, 456 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_8BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN)
</UL>
<P><STRONG><a name="[ac]"></a>UART_RxISR_8BIT_FIFOEN</STRONG> (Thumb, 824 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_8BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_8BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[aa]"></a>UART_RxISR_16BIT</STRONG> (Thumb, 452 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_RxISR_16BIT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
<LI> stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN)
</UL>
<P><STRONG><a name="[ad]"></a>UART_RxISR_16BIT_FIFOEN</STRONG> (Thumb, 820 bytes, Stack size 40 bytes, stm32h7xx_hal_uart.o(.text.UART_RxISR_16BIT_FIFOEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_RxISR_16BIT_FIFOEN &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.UART_Start_Receive_IT)
</UL>
<P><STRONG><a name="[9a]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32h7xx_hal_uart.o(.text.UART_DMAAbortOnError))
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32h7xx_hal_uart.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[9b]"></a>IMU_QuaternionEKF_F_Linearization_P_Fading</STRONG> (Thumb, 428 bytes, Stack size 20 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_F_Linearization_P_Fading))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IMU_QuaternionEKF_F_Linearization_P_Fading
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[9c]"></a>IMU_QuaternionEKF_Observe</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_Observe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IMU_QuaternionEKF_Observe &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[9d]"></a>IMU_QuaternionEKF_xhatUpdate</STRONG> (Thumb, 1184 bytes, Stack size 56 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_xhatUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_xhatUpdate &rArr; arm_mat_inverse_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_sub_f32
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_trans_f32
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_add_f32
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_mult_f32
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_mat_inverse_f32
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[9e]"></a>IMU_QuaternionEKF_SetH</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, quaternionekf.o(.text.IMU_QuaternionEKF_SetH))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = IMU_QuaternionEKF_SetH
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> quaternionekf.o(.text.IMU_QuaternionEKF_Init)
</UL>
<P><STRONG><a name="[c5]"></a>_GLOBAL__sub_I_ReferTask.cpp</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, refertask.o(.text._GLOBAL__sub_I_ReferTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_ReferTask.cpp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> refertask.o(.init_array)
</UL>
<P><STRONG><a name="[1e7]"></a>IMU_Init()</STRONG> (Thumb, 1480 bytes, Stack size 32 bytes, imutask.o(.text._ZL8IMU_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IMU_Init() &rArr; HAL_SPI_TransmitReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSThreadFun(unsigned long)
</UL>

<P><STRONG><a name="[a8]"></a>LedThreadFun(unsigned long)</STRONG> (Thumb, 420 bytes, Stack size 0 bytes, initaltask.o(.text._ZL12LedThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LedThreadFun(unsigned long) &rArr; _tx_thread_sleep &rArr; _tx_thread_system_suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[a9]"></a>DebugThreadFun(unsigned long)</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, initaltask.o(.text._ZL14DebugThreadFunm))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DebugThreadFun(unsigned long) &rArr; DebugPrintf(unsigned char*, char const*, ...) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_txe_byte_allocate
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::Transmit_DMA(unsigned char*, unsigned short)
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cUART::UART_Init(USART_TypeDef*, DMA_TypeDef*, unsigned int)
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_tx_thread_sleep
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugPrintf(unsigned char*, char const*, ...)
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> initaltask.o(.text.Task_Init)
</UL>
<P><STRONG><a name="[c6]"></a>_GLOBAL__sub_I_MotorTask.cpp</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, motortask.o(.text._GLOBAL__sub_I_MotorTask.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _GLOBAL__sub_I_MotorTask.cpp &rArr; cMotorUnit::cMotorUnit__sub_object() &rArr; arm_biquad_cascade_df1_init_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cMotorUnit::cMotorUnit__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motortask.o(.init_array)
</UL>
<P><STRONG><a name="[26d]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[269]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[98]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[12f]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
